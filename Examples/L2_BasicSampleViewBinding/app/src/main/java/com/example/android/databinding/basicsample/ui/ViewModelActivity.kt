/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.databinding.basicsample.ui

import android.os.Bundle
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import com.example.android.databinding.basicsample.data.ProfileLiveDataViewModel
import com.example.android.databinding.basicsample.databinding.ViewmodelProfileBinding

/**
 * This activity uses a [android.arch.lifecycle.ViewModel] to hold the data and respond to user
 * actions. Also, the layout uses [android.databinding.BindingAdapter]s instead of expressions
 * which are much more powerful.
 *
 * @see com.example.android.databinding.basicsample.util.BindingAdapters
 */
/*class ViewModelActivity : AppCompatActivity() {
    //private val viewModel1: ProfileLiveDataViewModel by viewModels() - только для фрагментов??? SunFlower
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Obtain (Получать) ViewModel from ViewModelProviders  (\data\ProfileObservableViewModel.kt)
       // val viewModelP = ViewModelProvider(this).get(ProfileLiveDataViewModel::class.java)
       // val viewModel1 by viewModels<ProfileLiveDataViewModel>()
        // Более короткая запись, требует "androidx.navigation:navigation-fragment-ktx:2.2.2"
        val viewModel: ProfileLiveDataViewModel  by viewModels()

        // An alternative ViewModel using Observable fields and @Bindable properties can be used:
        // val viewModel = ViewModelProviders.of(this).get(ProfileObservableViewModel::class.java)

        // Obtain (Получать) binding 
       // val binding: ViewmodelProfileBinding =
       //         DataBindingUtil.setContentView(this, R.layout.viewmodel_profile)
       // val binding = setContentView<ViewmodelProfileBinding>(this, R.layout.viewmodel_profile)
        // Можно и так - работает : плюс не надо import R и DataBindingUtil.setContentView
        val binding = ViewmodelProfileBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Bind layout with ViewModel Привязка макета с помощью ViewModel
        binding.viewmodel = viewModel

        // LiveData needs the lifecycle owner Живые данные нуждаются в владельце жизненного цикла
        binding.lifecycleOwner = this
    }
}*/

// ИТОГО В СУХОМ ОСТАТКЕ С ViewModel: (хороший вариант)
class ViewModelActivity : AppCompatActivity() {
       override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val viewModel: ProfileLiveDataViewModel  by viewModels()
        val binding = ViewmodelProfileBinding.inflate(layoutInflater)
        setContentView(binding.root)
        binding.viewmodel = viewModel
        binding.lifecycleOwner = this
    }
}

/*
// Generated by data binding compiler. Do not edit!
package com.example.android.databinding.basicsample.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.example.android.databinding.basicsample.R;
import com.example.android.databinding.basicsample.data.ProfileLiveDataViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ViewmodelProfileBinding extends ViewDataBinding {
  @NonNull
  public final ImageView imageView;

  @NonNull
  public final TextView lastname;

  @NonNull
  public final TextView lastnameLabel;

  @NonNull
  public final Button likeButton;

  @NonNull
  public final TextView likes;

  @NonNull
  public final TextView likesLabel;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView nameLabel;

  @NonNull
  public final ProgressBar progressBar;

  @Bindable
  protected ProfileLiveDataViewModel mViewmodel;

  protected ViewmodelProfileBinding(Object _bindingComponent, View _root, int _localFieldCount,
      ImageView imageView, TextView lastname, TextView lastnameLabel, Button likeButton,
      TextView likes, TextView likesLabel, TextView name, TextView nameLabel,
      ProgressBar progressBar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.imageView = imageView;
    this.lastname = lastname;
    this.lastnameLabel = lastnameLabel;
    this.likeButton = likeButton;
    this.likes = likes;
    this.likesLabel = likesLabel;
    this.name = name;
    this.nameLabel = nameLabel;
    this.progressBar = progressBar;
  }

  public abstract void setViewmodel(@Nullable ProfileLiveDataViewModel viewmodel);

  @Nullable
  public ProfileLiveDataViewModel getViewmodel() {
    return mViewmodel;
  }

  @NonNull
  public static ViewmodelProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.viewmodel_profile, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ViewmodelProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ViewmodelProfileBinding>inflateInternal(inflater, R.layout.viewmodel_profile, root, attachToRoot, component);
  }

  @NonNull
  public static ViewmodelProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.viewmodel_profile, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ViewmodelProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ViewmodelProfileBinding>inflateInternal(inflater, R.layout.viewmodel_profile, null, false, component);
  }

  public static ViewmodelProfileBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ViewmodelProfileBinding bind(@NonNull View view, @Nullable Object component) {
    return (ViewmodelProfileBinding)bind(component, view, R.layout.viewmodel_profile);
  }
}

 */