https://codelabs.developers.google.com/codelabs/advanced-android-kotlin-training-testing-basics/index.html?index=..%2F..index#0

Основы тестирования

Эта кодовая лаборатория охватывает основы запуска и написания тестов для Android. Он включает в себя разработку через тестирование, исходные наборы, Robolectric, AndroidX и тестирование ViewModels и LiveData.

Внедрение зависимостей и тестовые двойники

Эта лаборатория кода описывает, как реализовать ручное внедрение зависимостей и использовать тестовые двойники на Android. Он включает в себя настройку ручного внедрения зависимостей, создание подделок, создание макетов, создание ServiceLocators, инструментальные тесты для фрагментов, тестирование навигации и базовое тестирование Espresso.

Обзор тем тестирования

Эта последняя кодовая лаборатория охватывает тестирование определенных типов кода, в том числе:

Тестирование кода с сопрограммами
Комната для тестирования
Ресурс ожидания для эспрессо
Сквозное тестирование с привязкой данных

 05.1: основы тестирования
Эта первая лаборатория кода охватывает основы тестирования на Android, вы напишете свои первые тесты и научитесь тестировать LiveDataи ViewModels.

Вы узнаете о следующих темах:

Как писать и запускать модульные тесты на Android
Как использовать разработку через тестирование
Как выбрать инструментальные тесты и локальные тесты
Вы узнаете о следующих библиотеках и концепциях кода:

JUnit4
Hamcrest
Библиотека тестов AndroidX
Базовая тестовая библиотека компонентов архитектуры AndroidX

Что ты будешь делать
Настраивайте, запускайте и интерпретируйте как локальные, так и инструментальные тесты в Android.
Напишите модульные тесты в Android с помощью JUnit4 и Hamcrest.
Напишите простые LiveDataи ViewModelтесты.

https://codelabs.developers.google.com/codelabs/advanced-android-kotlin-training-testing-basics/index.html?index=..%2F..index#3

Шаг 2. Изучите пример кода приложения
Приложение TO-DO основано на популярном образце тестирования и архитектуры Architecture Blueprints (с использованием версии образца с реактивной архитектурой ). Приложение следует архитектуре из Руководства по архитектуре приложения . Он использует ViewModels с фрагментами, репозиторий и комнату. Если вы знакомы с любым из приведенных ниже примеров, это приложение имеет аналогичную архитектуру:

Учебные курсы по основам Android Kotlin
Расширенные обучающие программы для Android
Номер с видом на Codelab
Образец Android Sunflower
Разработка приложений для Android с помощью учебного курса Kotlin Udacity

Более важно, чтобы вы понимали общую архитектуру приложения, чем глубоко разбирались в логике любого отдельного уровня.

Вот список пакетов, которые вы найдете:

Пакет: com.example.android.architecture.blueprints.todoapp

.addedittask

Экран добавления или редактирования задачи: код слоя пользовательского интерфейса для добавления или редактирования задачи.

.data

Уровень данных: это касается уровня данных задач. Он содержит код базы данных, сети и репозитория.

.statistics

Экран статистики: код уровня пользовательского интерфейса для экрана статистики.

.taskdetail

Экран сведений о задаче: код уровня пользовательского интерфейса для отдельной задачи.

.tasks

Экран задач: код уровня пользовательского интерфейса для списка всех задач.

.util

Служебные классы: общие классы, используемые в различных частях приложения, например, для макета обновления смахивания, используемого на нескольких экранах.

Уровень данных (.data)

Это приложение включает смоделированный сетевой уровень в удаленном пакете и уровень базы данных в локальном пакете. Для простоты в этом проекте сетевой уровень моделируется с HashMap задержкой, вместо того, чтобы делать реальные сетевые запросы.

В DefaultTasksRepository координатах или опосредует между сетевым и слоем базы данных и то , что возвращает данные на уровень пользовательского интерфейса.

Слой пользовательского интерфейса (.addedittask, .statistics, .taskdetail, .tasks)

Каждый из пакетов уровня пользовательского интерфейса содержит фрагмент и модель представления, а также любые другие классы, необходимые для пользовательского интерфейса (например, адаптер для списка задач). Это TaskActivity действие, которое содержит все фрагменты.

Навигация

Навигация в приложении управляется компонентом "Навигация" . Это определено в nav_graph.xmlфайле. В моделях представления запускается навигация с помощью Eventкласса; модели представления также определяют, какие аргументы передать. Фрагменты наблюдают за Eventсимволами и выполняют фактическую навигацию между экранами.

Локальные тесты ( исходный набор)test

Эти тесты запускаются локально на JVM вашей машины разработки и не требуют эмулятора или физического устройства. Из-за этого они бегают быстро, но их верность ниже, что означает, что они действуют менее так, как в реальном мире.

В Android Studio локальные тесты представлены значком зеленого и красного треугольника.

Инструментальные тесты ( исходный набор)androidTest

Эти тесты выполняются на реальных или эмулируемых устройствах Android, поэтому они отражают то, что происходит в реальном мире, но также намного медленнее.

В Android Studio инструментальные тесты представлены Android с зеленым и красным треугольником.

Добавьте зависимость Hamcrest
testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"

assertEquals(result.completedTasksPercent, 0f)

// versus

assertThat(result.completedTasksPercent, `is`(0f))

 Еще один хороший инструмент для написания удобочитаемых утверждений - это библиотека Truth

7. Задача: написание дополнительных тестов.  Test Driven Development

В этой задаче вы напишете больше тестов, используя JUnit и Hamcrest. Вы также будете писать тесты, используя стратегию, основанную на программной практике разработки через тестирование . Разработка через тестирование или TDD - это школа программирования, которая гласит, что вместо того, чтобы сначала писать код функции, вы сначала пишете свои тесты. Затем вы пишете код функции, чтобы пройти тесты.

https://codelabs.developers.google.com/codelabs/advanced-android-kotlin-training-testing-basics/index.html?index=..%2F..index#7




