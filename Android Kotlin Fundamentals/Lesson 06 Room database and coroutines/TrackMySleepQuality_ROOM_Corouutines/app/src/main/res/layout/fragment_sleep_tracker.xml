<?xml version="1.0" encoding="utf-8"?>
  <!--
  ~ Copyright 2019, The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!-- Wrapping the layout into /layout to make it available with data binding. -->
<!-- Обертывание макета в /layout, чтобы сделать его доступным с привязкой данных. -->
<layout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Data to make available to the XML via data binding. In this case,
         the whole ViewModel, so that we can access the LiveData,
         click handlers, and state variables. -->
    <!-- Данные, которые можно сделать доступными для XML через привязку данных. В этом случае,
    вся модель ViewModel, так что мы можем получить доступ к живым данным,
    щелкните обработчики и переменные состояния. -->
    <data>
        <!-- завершить настройку привязки данных
        в, SleepTrackerFragment чтобы соединить их ViewModel с пользовательским интерфейсом-->
        <variable
            name="sleepTrackerViewModel"
            type="com.example.android.trackmysleepquality.sleeptracker.SleepTrackerViewModel" />
        <!-- В SleepTrackerFragment:
        binding.setLifecycleOwner(this)
        binding.sleepTrackerViewModel = sleepTrackerViewModel -->

    </data>

    <!-- Start of the visible fragment layout using ConstraintLayout -->
    <!-- Запуск макета видимого фрагмента с использованием макета ограничения -->
    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".sleeptracker.SleepTrackerFragment">

        <!-- Simplest way of displaying scrollable text and data. There is a
             better and more efficient way to do this, and you will learn about
             RecyclerView in a later lesson. -->
        <!-- Самый простой способ отображения прокручиваемого текста и данных. Есть
            лучший и более эффективный способ сделать это, и вы узнаете о нем
            RecyclerView в более позднем уроке. -->

        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="0dp"
            app:layout_constraintBottom_toTopOf="@+id/clear_button"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/stop_button">

            <!-- In the TextView, we can access the nightsString LiveData,
                 which keeps it displayed and updated in the TextView
                 whenever it changes. -->
            <!-- В TextView мы можем получить доступ к данным nights String Live,
                что позволяет ему отображаться и обновляться в текстовом представлении
                всякий раз, когда он меняется. -->

            <TextView
                android:id="@+id/textview"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/margin"
                android:layout_marginTop="@dimen/margin"
                android:layout_marginEnd="@dimen/margin"
                android:text="@{sleepTrackerViewModel.nightsString}" />
            <!-- из SleepTrackerViewModel преобразования в nightsString из nights = все ночи из базы данных
            а т.к. это list ночей то получим их список-->
        </ScrollView>

        <!-- With data binding and LiveData, we can track the buttons' visibility states
             from the ViewModel. The click handler is in the ViewModel as well, and
             you can set it for the Views using this lambda pattern. -->
        <!-- С привязкой данных и живыми данными мы можем отслеживать состояния видимости кнопок
            из ViewModel. Обработчик щелчков также находится в ViewModel, и
            вы можете установить его для представлений, используя этот лямбда-шаблон. -->

        <Button
            android:id="@+id/start_button"
            style="@style/SleepButtons"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/margin"
            android:text="@string/start"
            app:layout_constraintBaseline_toBaselineOf="@id/stop_button"
            app:layout_constraintEnd_toStartOf="@+id/stop_button"
            app:layout_constraintHorizontal_chainStyle="spread"
            app:layout_constraintStart_toStartOf="parent"
            android:enabled="@{sleepTrackerViewModel.startButtonVisible}"
            android:onClick="@{() -> sleepTrackerViewModel.onStartTracking()}"/>
        <!-- sleepTrackerViewModel.onStartTracking() функция в sleepTrackerViewModel -->

        <Button
            android:id="@+id/stop_button"
            style="@style/SleepButtons"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/margin"
            android:layout_marginEnd="@dimen/margin"
            android:text="@string/stop"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toEndOf="@+id/start_button"
            app:layout_constraintTop_toTopOf="parent"
            android:enabled="@{sleepTrackerViewModel.stopButtonVisible}"
            android:onClick="@{() -> sleepTrackerViewModel.onStopTracking()}"/>
        <!-- функция в sleepTrackerViewModel -->

        <Button
            android:id="@+id/clear_button"
            style="@style/SleepButtons"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="@dimen/margin"
            android:layout_marginEnd="@dimen/margin"
            android:layout_marginBottom="@dimen/margin"
            android:text="@string/clear"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            android:enabled="@{sleepTrackerViewModel.clearButtonVisible}"
            android:onClick="@{() -> sleepTrackerViewModel.onClear()}"/>
        <!-- функция в sleepTrackerViewModel -->

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>
