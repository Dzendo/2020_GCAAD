https://developer.android.com/topic/libraries/architecture/coroutines

https://developer.android.com/codelabs/kotlin-coroutines?return=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fandroid-coroutines%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fkotlin-coroutines#0

https://codelabs.developers.google.com/codelabs/advanced-kotlin-coroutines/#9
=================================================================================
Для разработчиков Android > Документы > Гиды
https://developer.android.com/topic/libraries/architecture/coroutines

Используйте сопрограммы Kotlin с компонентами архитектуры

Сопрограммы Kotlin предоставляют API, позволяющий писать асинхронный код. С помощью сопрограмм Kotlin вы можете определить a CoroutineScope, который поможет вам управлять временем запуска сопрограмм. Каждая асинхронная операция выполняется в определенной области.

Компоненты архитектуры обеспечивают первоклассную поддержку сопрограмм для логических областей в вашем приложении, а также уровень взаимодействия с LiveData. В этом разделе объясняется, как эффективно использовать сопрограммы с компонентами архитектуры.

Добавить зависимости KTX

Встроенные области сопрограмм, описанные в этом разделе, содержатся в расширениях KTX для каждого соответствующего компонента архитектуры. Обязательно добавьте соответствующие зависимости при использовании этих областей.

Для ViewModelScope, используйте androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0-beta01 или выше.
Для LifecycleScope, используйте androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01 или выше.
Для liveData, используйте androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01 или выше.

Области сопрограмм с учетом жизненного цикла

Компоненты архитектуры определяют следующие встроенные области, которые вы можете использовать в своем приложении.

ViewModelScope viewLifecycleOwner.lifecycleScope.launch {

A ViewModelScope определяется для каждого ViewModel в вашем приложении. Любая сопрограмма, запущенная в этой области, автоматически отменяется, если ViewModel очищается. Сопрограммы здесь полезны, когда у вас есть работа, которую нужно выполнить, только если ViewModel активен. Например, если вы вычисляете некоторые данные для макета, вы должны ограничить работу таким ViewModel образом, чтобы при ViewModel удалении работы работа отменялась автоматически, чтобы избежать потребления ресурсов.

viewLifecycleOwner.lifecycleScope.launch {
A ViewModelScope определяется для каждого ViewModelв вашем приложении
Сопрограммы здесь полезны, когда у вас есть работа, которую нужно выполнить, только если ViewModel активен

Вы можете получить доступ к CoroutineScope a ViewModel через viewModelScope свойство ViewModel, как показано в следующем примере:

class MyViewModel: ViewModel() {
    init {
        viewModelScope.launch {
            // Coroutine that will be canceled when the ViewModel is cleared.
        }
    }
}

Жизненный цикл

А LifecycleScope определяется для каждого Lifecycle объекта. Любая сопрограмма, запущенная в этой области видимости, отменяется при Lifecycle уничтожении. Вы можете получить доступ к CoroutineScope из Lifecycle или через lifecycle.coroutineScope или lifecycleOwner.lifecycleScope свойства.

В приведенном ниже примере показано, как использовать lifecycleOwner.lifecycleScope для асинхронного создания предварительно вычисленного текста:
class MyFragment: Fragment() {
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        viewLifecycleOwner.lifecycleScope.launch {
            val params = TextViewCompat.getTextMetricsParams(textView)
            val precomputedText = withContext(Dispatchers.Default) {
                PrecomputedTextCompat.create(longTextContent, params)
            }
            TextViewCompat.setPrecomputedText(textView, precomputedText)
        }
    }
}

Приостановить сопрограммы с учетом жизненного цикла

Несмотря на то, что CoroutineScope предоставляет правильный способ автоматически отменить длительные операции, у вас могут быть другие случаи, когда вы хотите приостановить выполнение блока кода, если он не Lifecycle находится в определенном состоянии. Например, чтобы запустить a FragmentTransaction, вы должны подождать, пока не Lifecycle станет равным STARTED. Для этих случаев Lifecycle предусмотрены дополнительные методы: lifecycle.whenCreated, lifecycle.whenStarted, и lifecycle.whenResumed. Любой запуск сопрограммы внутри этих блоков приостанавливается, если Lifecycle он не находится хотя бы в минимальном желаемом состоянии.

lifecycle.whenCreated, lifecycle.whenStarted, и lifecycle.whenResumed
lifecycleScope.launch {
            whenStarted {

В приведенном ниже примере содержится блок кода, который запускается только тогда, когда связанный с ним Lifecycle находится по крайней мере в STARTED состоянии:

class MyFragment: Fragment {
    init { // Notice that we can safely launch in the constructor of the Fragment.
        lifecycleScope.launch {
            whenStarted {
                // The block inside will run only when Lifecycle is at least STARTED.
                // It will start executing when fragment is started and
                // can call other suspend methods.
                loadingView.visibility = View.VISIBLE
                val canAccess = withContext(Dispatchers.IO) {
                    checkUserAccess()
                }

                // When checkUserAccess returns, the next line is automatically
                // suspended if the Lifecycle is not *at least* STARTED.
                // We could safely run fragment transactions because we know the
                // code won't run unless the lifecycle is at least STARTED.
                loadingView.visibility = View.GONE
                if (canAccess == false) {
                    findNavController().popBackStack()
                } else {
                    showContent()
                }
            }

            // This line runs only after the whenStarted block above has completed.

        }
    }
}

Если Lifecycleуничтожается, когда сопрограмма активна одним из whenметодов, сопрограмма автоматически отменяется. В приведенном ниже примере finally блок запускается, когда Lifecycle состояние равно DESTROYED:
class MyFragment: Fragment {
    init {
        lifecycleScope.launchWhenStarted {
            try {
                // Call some suspend functions.
            } finally {
                // This line might execute after Lifecycle is DESTROYED.
                if (lifecycle.state >= STARTED) {
                    // Here, since we've checked, it is safe to run any
                    // Fragment transactions.
                }
            }
        }
    }
}

Примечание. Несмотря на то, что эти методы обеспечивают удобство при работе с ними Lifecycle, их следует использовать только в том случае, если информация действительна в рамках Lifecycle(например, предварительно вычисленного текста). Помните, что при перезапуске действия сопрограмма не перезапускается.

Используйте сопрограммы с LiveData--------------------------

При использовании LiveDataможет потребоваться асинхронный расчет значений. Например, вы можете захотеть получить настройки пользователя и передать их своему пользовательскому интерфейсу. В этих случаях вы можете использовать liveData функцию построителя для вызова suspend функции, обслуживающей результат как LiveData объект.

В приведенном ниже примере loadUser() функция приостановки объявлена ​​в другом месте. Используйте liveData функцию построителя для loadUser() асинхронного вызова, а затем используйте emit() для выдачи результата:

val user: LiveData<User> = liveData {
    val data = database.loadUser() // loadUser is a suspend function.
    emit(data)
}

liveData Строительный блок служит структурированной параллельности примитивной между сопрограммами и LiveData. Блок кода начинает выполнение, когда LiveData становится активным, и автоматически отменяется после настраиваемого тайм-аута, когда LiveData становится неактивным. Если он был отменен до завершения, он будет перезапущен, если LiveData снова станет активным. Если он успешно завершился в предыдущем запуске, он не перезапускается. Обратите внимание, что он перезапускается только в случае автоматической отмены. Если блок отменен по какой-либо другой причине (например, бросок a CancelationException), он не запускается заново.

Вы также можете передать несколько значений из блока. Каждый emit() вызов приостанавливает выполнение блока до тех пор, пока LiveData значение не будет установлено в основном потоке.

emit()для выдачи результата:
val user: LiveData<Result> = liveData {
    emit(Result.loading())
    try {
        emit(Result.success(fetchUser()))
    } catch(ioException: Exception) {
        emit(Result.error(ioException))
    }
}
 Каждый emit() вызов приостанавливает выполнение блока до тех пор, пока LiveData значение не будет установлено в основном потоке.


Вы также можете комбинировать liveData с Transformations, как показано в следующем примере:
class MyViewModel: ViewModel() {
    private val userId: LiveData<String> = MutableLiveData()
    val user = userId.switchMap { id ->
        liveData(context = viewModelScope.coroutineContext + Dispatchers.IO) {
            emit(database.loadUserById(id))
        }
    }
}

Вы можете генерировать несколько значений из a LiveData, вызывая emitSource() функцию всякий раз, когда вы хотите передать новое значение. Обратите внимание, что каждый вызов emit() или emitSource() удаление ранее добавленного источника.

class UserDao: Dao {
    @Query("SELECT * FROM User WHERE id = :id")
    fun getUser(id: String): LiveData<User>
}

class MyRepository {
    fun getUser(id: String) = liveData<User> {
        val disposable = emitSource(
            userDao.getUser(id).map {
                Result.loading(it)
            }
        )
        try {
            val user = webservice.fetchUser(id)
            // Stop the previous emission to avoid dispatching the updated user
            // as `loading`.
            disposable.dispose()
            // Update the database.
            userDao.insert(user)
            // Re-establish the emission with success type.
            emitSource(
                userDao.getUser(id).map {
                    Result.success(it)
                }
            )
        } catch(exception: IOException) {
            // Any call to `emit` disposes the previous one automatically so we don't
            // need to dispose it here as we didn't get an updated value.
            emitSource(
                userDao.getUser(id).map {
                    Result.error(exception, it)
                }
            )
        }
    }
}


emit принимает dataкласс, тогда как emitSource принимает LiveData<T>(T -> data).
 Рассмотрим следующий пример: - У меня два типа звонков: -

suspend fun getData(): Data // returns directly data
и другой;

suspend fun getData(): LiveData<Data> // returns live data instead

liveData {
   emit(LOADING)
   emit(getData())
}

Если я хочу показать пользователю кешированные данные из базы данных, пока я получаю свежие данные с удаленного компьютера, с помощью только emit это будет выглядеть примерно так:
liveData{
    emit(db.getData())
    val latest = webService.getLatestData()
    db.insert(latest)
    emit(db.getData())
}
Но с emitSource это выглядит так:

liveData{
    emitSource(db.getData())
    val latest = webService.getLatestData()
    db.insert(latest)
}
Не нужно снова вызывать emit, так как liveData уже имеет источник.

С помощью emitSource () вы можете не только передать одно значение, но и присоединить свои LiveData к другим LiveData и начать излучение из них. В любом случае каждый вызов emit () или emitSource () удаляет ранее добавленный источник.
https://developer.android.com/topic/libraries/architecture/coroutines
===============================================================================================

Ботаник: 
Первый способ создать корутину: async
fun fechCharacterData(): Deffered<CharacterGenaration.CharacterData> {
	return async {
		val apiData= URL(CHARACTER_DATA_API).readText()
		(return) CharacterGenaration.fromAPIData(apiData)
	}
}

Deffered<CharacterGenaration.CharacterData> - обещание на будущее - будет возвращено только когда 
будут вычеслены данные  
ВЫЗОВ:

..... AppCompactActivity(){
	ovveride fun onCreate(..Bundle?){
	.................
	generateButton.setOnClickListener {
	launch(UI) {
		characterData = fetchCharacterData().await()
		displayCharacterData()
		}
	}
.......
}
Launch вызывается в главном потоке(UI) - нужен интерфейс
а вот async вызовется в CommonPool(по умолчанию) т.е. await() выполнение fetchCharacterData()
а она async вызовется в потоке из пула CommonPool и отдаст результат в UI в characterData
async и launch(UI) - строители сопрограмм:
async создает сопрограмму, которая возвращает Deffered (в будущем)а он имеет await() - приостановку  
launch(UI) создает и сразу запускает сопрограмму 

Традиционные потоки - "блокируются" - не может выполнять другую работу 

Сопрограммы приостанавливаются (Значек слева) - поток не блокирован и выполняет другую работу
.await() Это и есть suspend:
public suspend fun await(): T

Для получения дополнительной информации, связанной с сопрограммами, перейдите по следующим ссылкам:

Повышение производительности приложений с помощью сопрограмм Kotlin
Обзор сопрограмм
Многопоточность в CoroutineWorker
Дополнительные ресурсы
Чтобы узнать больше об использовании сопрограмм с компонентами архитектуры, обратитесь к следующим дополнительным ресурсам.

Образцы
Kotlin сопрограммы с компонентами архитектуры
Блоги
Coroutines на Android: шаблоны приложений
Простые сопрограммы в Android: viewModelScope
Тестирование двух последовательных выбросов LiveData в сопрограммах

https://developer.android.com/topic/libraries/architecture/coroutines





