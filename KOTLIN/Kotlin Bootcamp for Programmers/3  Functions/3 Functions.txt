2. Задача: изучить функцию main ()
В этом задании вы создадите программу Kotlin и узнаете о main()функции, а также о том, как передавать аргументы программе из командной строки.

Возможно, вы помните printHello()функцию, которую вы ввели в REPL в предыдущем коде:

fun printHello() {
    println ("Hello World")
}

printHello()
⇒ Hello World
Вы определяете функции с помощью funключевого слова, за которым следует имя функции. Как и в других языках программирования, круглые скобки ()предназначены для аргументов функции, если таковые имеются. Фигурные скобки {}создают код для функции. Для этой функции нет возвращаемого типа, потому что она ничего не возвращает.

Шаг 1: Создайте файл Kotlin
Откройте IntelliJ IDEA.
Панель Project слева в IntelliJ IDEA показывает список файлов и папок вашего проекта. Найдите и щелкните правой кнопкой мыши папку src в разделе Hello Kotlin. (У вас уже должен быть проект Hello Kotlin из предыдущей кодовой метки.)
Выберите « Создать»> «Файл / класс Kotlin» .
Держите Вид в файл , и имя файла Привет .
Нажмите ОК .
Теперь в папке src есть файл с именем Hello.kt .



Шаг 2: Добавьте код и запустите вашу программу
Как и в других языках, main()функция Kotlin определяет точку входа для выполнения. Любые аргументы командной строки передаются в виде массива строк.

Введите или вставьте следующий код в файл Hello.kt :
fun main(args: Array<String>) {
    println("Hello, world!")
}
Совет: Начиная с Kotlin 1.3, если ваша main()функция не использует какие-либо параметры, вам не нужно определять args.

Как и ваша предыдущая printHello()функция, эта функция не имеет returnоператора. Каждая функция в Kotlin возвращает что-то, даже если ничего явно не указано. Таким образом, функция, подобная этой main()функции, возвращает тип kotlin.Unit, который является способом Котлина сказать, что нет значения.

Примечание. Когда функция возвращается kotlin.Unit, вам не нужно указывать ее явно. Это отличается от некоторых других языков, где вы должны явно сказать, что вы ничего не возвращаете.

Чтобы запустить вашу программу, нажмите зеленый треугольник слева от main()функции. Выберите Run 'HelloKt' из меню.
IntelliJ IDEA компилирует программу и запускает ее. Результаты отображаются в области журнала внизу, как показано ниже.


Java-программисты: если вы используете ранее установленную версию IntelliJ IDEA вместо установки новой копии, в этот момент у вас могут возникнуть проблемы с доступом к компилятору Kotlin. Убедитесь, что ваш проект ссылается на правильную версию JDK. См. Это обсуждение переполнения стека и документации SDK проекта изменения для IntelliJ IDEA.

Шаг 3: Передайте аргументы в main ()
Поскольку вы запускаете свою программу из IntelliJ IDEA, а не из командной строки, вам необходимо указать любые аргументы для программы немного по-другому.

Выберите « Выполнить»> «Редактировать конфигурации» . Откроется окно « Конфигурация запуска / отладки» .
Введите Kotlin!в поле « Аргументы программы» .
Нажмите ОК .


Шаг 4: Измените код, чтобы использовать шаблон строки
Шаблон строка вставляет переменную или выражение в строку, и $указывает , что часть строки будет переменную или выражение. Фигурные скобки {}обрамляют выражение, если оно есть.

В Hello.kt измените приветственное сообщение, чтобы использовать первый аргумент, переданный в программу args[0], вместо "world".
fun main(args: Array<String>) {
    println("Hello, ${args[0]}")
}
Запустите программу, и результат будет содержать указанный аргумент.
⇒ Привет, Котлин!

3. Задача: узнать, почему (почти) все имеет ценность
В этом задании вы узнаете, почему почти все в Kotlin имеет ценность, и почему это полезно.

В некоторых других языках есть операторы , представляющие собой строки кода, которые не имеют значения. В Kotlin почти все является выражением и имеет значение, даже если это значение kotlin.Unit.

В Hello.kt напишите код, main()чтобы назначить println()переменную с именем isUnitи распечатать ее. ( println()не возвращает значение, поэтому оно возвращает kotlin.Unit.)
// Will assign kotlin.Unit
val isUnit = println("This is an expression")
println(isUnit)
Запустите вашу программу. Первый println()печатает строку "This is an expression". Второй println()выводит значение первого println()оператора, то есть kotlin.Unit.
⇒ Это выражение
kotlin.Unit
Объявите valвызываемый temperatureи инициализируйте его до 10.
Объявить другие valназываются isHotи присвоить возвращаемое значение в if/ elseзаявлении isHot, как показано в следующем коде. Поскольку это выражение, вы можете сразу использовать значение ifвыражения.
val temperature = 10
val isHot = if (temperature > 50) true else false
println(isHot)
⇒ неверно
Используйте значение выражения в строковом шаблоне. Добавьте код, чтобы проверить температуру, чтобы определить, является ли рыба безопасной или слишком теплой, затем запустите вашу программу.
val temperature = 10
val message = "The water temperature is ${ if (temperature > 50) "too warm" else "OK" }."
println(message)
⇒ Температура воды в норме.
Примечание. Циклы являются исключениями для «все имеет значение». Не существует разумного значения для forциклов или whileциклов, поэтому они не имеют значений. Если вы попытаетесь присвоить значение цикла чему-либо, компилятор выдаст ошибку.

4. Задача: узнать больше о функциях
В этом задании вы узнаете больше о функциях в Kotlin и об очень полезном whenусловном выражении.

Шаг 1. Создайте несколько функций
На этом шаге вы собрали часть того, что узнали, и создали функции разных типов. Вы можете заменить содержимое Hello.kt новым кодом.

Напишите функцию с именем, feedTheFish()которая вызывает randomDay()случайный день недели. Используйте шаблон строки, чтобы напечатать foodдля рыбы, чтобы поесть в тот день. На данный момент рыба ест одну и ту же пищу каждый день.
fun feedTheFish() {
    val day = randomDay()
    val food = "pellets"
    println ("Today is $day and the fish eat $food")
}

fun main(args: Array<String>) {
    feedTheFish()
}
Напишите randomDay()функцию, чтобы выбрать случайный день из массива и вернуть его.
nextInt()Функция принимает предел целого числа, что ограничивает число от Random()0 , до 6 , чтобы соответствовать weekмассиву.

fun randomDay() : String {
    val week = arrayOf ("Monday", "Tuesday", "Wednesday", "Thursday",
            "Friday", "Saturday", "Sunday")
    return week[Random().nextInt(week.size)]
}
Функции Random()и nextInt()определены в java.util.*. Вверху файла добавьте необходимый импорт:
import java.util.*    // required import
Совет: перед добавлением импорта Random()выдает неразрешенную ссылку на ошибку в IntelliJ IDEA. Чтобы добавить импорт автоматически, нажмите Random(), затем нажмите Alt+Enter( Option+Enter на Mac). Выберите « Импорт»> «java.util.Random» .

Запустите вашу программу и проверьте вывод.
⇒ сегодня вторник и рыба ест гранулы
Шаг 2: Используйте выражение когда
Расширяя это, измените код, чтобы выбрать разные блюда для разных дней, используя whenвыражение. Оператор whenпохож на switchдругие языки программирования, но whenавтоматически разрывается в конце каждой ветви. Это также гарантирует, что ваш код охватывает все ветви, если вы проверяете перечисление.

В Hello.kt добавьте функцию с именем, fishFood()которая принимает день как a Stringи возвращает рыбную пищу за день как a String. Используйте when(), чтобы каждый день рыба получала определенную пищу. Запустите вашу программу несколько раз, чтобы увидеть разные результаты.
fun fishFood (day : String) : String {
    var food = ""
    when (day) {
        "Monday" -> food = "flakes"
        "Tuesday" -> food = "pellets"
        "Wednesday" -> food = "redworms"
        "Thursday" -> food = "granules"
        "Friday" -> food = "mosquitoes"
        "Saturday" -> food = "lettuce"
        "Sunday" -> food = "plankton"
    }
    return food
}

fun feedTheFish() {
    val day = randomDay()
    val food = fishFood(day)

    println ("Today is $day and the fish eat $food")
}
⇒ сегодня четверг и рыба ест гранулы
Добавьте ветвь по умолчанию к whenвыражению используя else. Для тестирования, чтобы убедиться , что по умолчанию берется иногда в вашей программе, удалите Tuesdayи Saturdayветвь.

Наличие ветки по умолчанию гарантирует foodполучение значения до его возвращения, поэтому его больше не нужно инициализировать. Поскольку код теперь назначает строку foodтолько один раз, вы можете объявить foodс помощью valвместо var.
fun fishFood (day : String) : String {
    val food : String
    when (day) {
        "Monday" -> food = "flakes"
        "Wednesday" -> food = "redworms"
        "Thursday" -> food = "granules"
        "Friday" -> food = "mosquitoes"
        "Sunday" -> food = "plankton"
        else -> food = "nothing"
    }
    return food
}
Поскольку каждое выражение имеет значение, вы можете сделать этот код немного более кратким. Верните значение whenвыражения напрямую и удалите foodпеременную. Значение whenвыражения - это значение последнего выражения ветви, которая удовлетворяла условию.
fun fishFood (day : String) : String {
    return when (day) {
        "Monday" -> "flakes"
        "Wednesday" -> "redworms"
        "Thursday" -> "granules"
        "Friday" -> "mosquitoes"
        "Sunday" -> "plankton"
        else -> "nothing"
    }
}
Окончательная версия вашей программы выглядит примерно так, как показано ниже.

import java.util.*    // required import

fun randomDay() : String {
    val week = arrayOf ("Monday", "Tuesday", "Wednesday", "Thursday",
        "Friday", "Saturday", "Sunday")
    return week[Random().nextInt(week.size)]
}

fun fishFood (day : String) : String {
    return when (day) {
        "Monday" -> "flakes"
        "Wednesday" -> "redworms"
        "Thursday" -> "granules"
        "Friday" -> "mosquitoes"
        "Sunday" -> "plankton"
        else -> "nothing"
    }
}

fun feedTheFish() {
    val day = randomDay()
    val food = fishFood(day)
    println ("Today is $day and the fish eat $food")
}

fun main(args: Array<String>) {
    feedTheFish()
}

5. Задача: изучить значения по умолчанию и компактные функции
В этой задаче вы узнаете о значениях по умолчанию для функций и методов. Вы также узнаете о компактных функциях , которые могут сделать ваш код более кратким и читабельным, а также сократить количество путей кода для тестирования. Компактные функции также называются функциями с одним выражением .

Шаг 1. Создайте значение по умолчанию для параметра
В Kotlin вы можете передавать аргументы по имени параметра. Вы также можете указать значения по умолчанию для параметров: если аргумент не предоставлен вызывающей стороной, используется значение по умолчанию. Позже, когда вы пишете методы (функции-члены), это означает, что вы можете избежать написания множества версий одного и того же метода.

В Hello.kt напишите swim()функцию с Stringименем параметра, speedкоторый печатает скорость рыбы. speedПараметр имеет значение по умолчанию "fast".
fun swim(speed: String = "fast") {
   println("swimming $speed")
}
Из main()функции, вызовите swim()функцию тремя способами. Сначала вызовите функцию, используя значение по умолчанию. Затем вызовите функцию и передайте speedпараметр без имени, затем вызовите функцию, назвав speedпараметр.
swim()   // uses default speed
swim("slow")   // positional argument
swim(speed="turtle-like")   // named parameter
⇒ плавать быстро
плавать медленно
плавать как черепаха
Примечание. Аргументы не должны использовать имена параметров; Вы можете просто передать аргументы в определенном порядке. Но со значениями по умолчанию это может немного сбить с толку, поэтому рекомендуется сначала указывать параметры без значений по умолчанию, а после - с параметрами по умолчанию.

Шаг 2: Добавьте необходимые параметры
Если для параметра не указано значение по умолчанию, соответствующий аргумент всегда должен быть передан.

В Hello.kt , написать shouldChangeWater()функцию , которая принимает три параметра: day, temperature, и dirtyуровень. Функция возвращается, trueесли вода должна быть заменена, что происходит, если это воскресенье, если температура слишком высока, или если вода слишком грязная. Требуется день недели, но температура по умолчанию - 22, а уровень грязи по умолчанию - 20.

Используйте whenвыражение без аргумента, которое в Kotlin действует как серия if/else ifпроверок.
fun shouldChangeWater (day: String, temperature: Int = 22, dirty: Int = 20): Boolean {
    return when {
        temperature > 30 -> true
        dirty > 30 -> true
        day == "Sunday" ->  true
        else -> false
    }
}
Вызов shouldChangeWater()из feedTheFish()и поставить на следующий день. dayПараметр не имеет значения по умолчанию, поэтому вы должны указать аргумент. Два других параметра shouldChangeWater()имеют значения по умолчанию, поэтому вам не нужно передавать аргументы для них.
fun feedTheFish() {
    val day = randomDay()
    val food = fishFood(day)
    println ("Today is $day and the fish eat $food")
    println("Change water: ${shouldChangeWater(day)}")
}
=> Сегодня четверг и рыба ест гранулы.
Смена воды: ложь.
Шаг 3: Сделайте компактные функции
whenВыражения , которое вы писали в предыдущем шаге пакеты много логики в небольшое количество кода. Если вы хотите немного распаковать его, или если условия для проверки были более сложными, вы можете использовать некоторые локальные переменные с хорошими именами. Но Kotlin способ сделать это с компактными функциями.

Компактные функции или функции с одним выражением - это распространенный шаблон в Kotlin. Когда функция возвращает результаты одного выражения, вы можете указать тело функции после =символа, опустить фигурные скобки {}и опустить return.

в Hello.kt добавьте компактные функции для проверки условий.
fun isTooHot(temperature: Int) = temperature > 30

fun isDirty(dirty: Int) = dirty > 30

fun isSunday(day: String) = day == "Sunday"
Изменить, shouldChangeWater()чтобы вызвать новые функции.
fun shouldChangeWater (day: String, temperature: Int = 22, dirty: Int = 20): Boolean {
    return when {
        isTooHot(temperature) -> true
        isDirty(dirty) -> true
        isSunday(day) -> true
        else  -> false
    }
}
Запустите вашу программу. Вывод println()с shouldChangeWater()должен быть таким же, каким он был до того, как вы переключились на использование компактных функций.
Значения по умолчанию
Значение по умолчанию для параметра не должно быть значением. Это может быть другая функция, как показано в следующем частичном примере:

fun shouldChangeWater (day: String, temperature: Int = 22, dirty: Int = getDirtySensorReading()): Boolean {
    ...
Примечание. Функция, используемая в качестве значения по умолчанию, оценивается во время выполнения, поэтому не помещайте в функцию дорогостоящую операцию, такую ​​как чтение файла или выделение большого объема памяти. Операция выполняется каждый раз, когда вызывается ваша функция, что может замедлить вашу программу.

6. Задача: начать работу с фильтрами
В этом задании вы немного узнаете о фильтрах в Kotlin. Фильтры - это удобный способ получить часть списка на основе определенных условий.

Шаг 1. Создайте фильтр
В Hello.kt определите список аквариумных украшений на верхнем уровне с помощью listOf(). Вы можете заменить содержимое Hello.kt .
val decorations = listOf ("rock", "pagoda", "plastic plant", "alligator", "flowerpot")
Создайте новую main()функцию со строкой для печати только украшений, которые начинаются с буквы «p». Код для условия фильтра находится в фигурных скобках {}и itссылается на каждый элемент, когда фильтр проходит цикл. Если выражение возвращается true, элемент включен.
fun main() {
    println( decorations.filter {it[0] == 'p'})
}
Запустите вашу программу, и вы увидите следующий вывод в окне Run :
⇒ [пагода, завод пластмасс]
Шаг 2: Сравните нетерпеливые и ленивые фильтры
Если вы знакомы с фильтрами на других языках, вам может быть интересно, являются ли фильтры в Kotlin нетерпеливыми или ленивыми . Создается ли список результатов немедленно или когда к нему обращаются? В Котлине это происходит так, как вам нужно. По умолчанию filterстремится, и каждый раз, когда вы используете фильтр, создается список.

Чтобы сделать фильтр ленивым, вы можете использовать Sequenceколлекцию, которая может просматривать только один элемент за раз, начиная с начала и заканчивая концом. Удобно, это именно тот API, который нужен ленивому фильтру.

В Hello.kt измените код, чтобы назначить отфильтрованный список переменной с именем eager, а затем распечатайте ее.
fun main() {
    val decorations = listOf ("rock", "pagoda", "plastic plant", "alligator", "flowerpot")

    // eager, creates a new list
    val eager = decorations.filter { it [0] == 'p' }
    println("eager: $eager")
Ниже этого кода оцените фильтр, используя Sequencewith asSequence(). Присвойте последовательность переменной с именем filteredи напечатайте ее.
   // lazy, will wait until asked to evaluate
    val filtered = decorations.asSequence().filter { it[0] == 'p' }
    println("filtered: $filtered")
Когда вы возвращаете результаты фильтра как Sequence, filteredпеременная не будет содержать новый список - она ​​будет содержать Sequenceэлементы списка и сведения о фильтре для применения к этим элементам. Каждый раз, когда вы обращаетесь к элементам Sequence, фильтр применяется, и результат возвращается вам.

Принудительно вычислить последовательность, преобразовав ее в Listс toList(). Распечатайте результат.
    // force evaluation of the lazy list
    val newList = filtered.toList()
    println("new list: $newList")
Запустите вашу программу и посмотрите результат.
⇒ нетерпеливо: [пагода, пластиковый завод]
отфильтрованный: kotlin.sequence.FilteringSequence@386cc1c4
новый список: [пагода, пластиковый завод]
Чтобы визуализировать, что происходит с Sequenceленивой оценкой, используйте map()функцию. map()Функция выполняет простое преобразование каждого элемента в последовательности.

С тем же decorationsсписком, что и выше, создайте преобразование, map()которое ничего не делает и просто возвращает переданный элемент. Добавьте a, println()чтобы показать каждый раз, когда к элементу обращаются, и назначьте последовательность переменной с именем lazyMap.
    val lazyMap = decorations.asSequence().map {
        println("access: $it")
        it
    }
Распечатайте lazyMap, распечатайте первый элемент lazyMapиспользования first()и напечатайте lazyMapпреобразованный в List.
    println("lazy: $lazyMap")
    println("-----")
    println("first: ${lazyMap.first()}")
    println("-----")
    println("all: ${lazyMap.toList()}")
Запустите вашу программу и посмотрите результат. Печать lazyMapпросто печатает ссылку на Sequenceвнутреннее println()не называется. Печать первого элемента позволяет получить доступ только к первому элементу. Преобразование Sequenceк Listдоступам всех элементов.
⇒ ленивый: kotlin.sequence.TransformingSequence@5ba23b66
-----
доступ:
сначала рок : рок
-----
доступ: доступ с камня
:
доступ к пагоде :
доступ к заводу из пластика :
доступ к аллигатору :
все в горшке : [камень, пагода, пластик растение, аллигатор, цветочный горшок]
Создайте новый, Sequenceиспользуя оригинальный фильтр перед применением map. Распечатайте этот результат.
    val lazyMap2 = decorations.asSequence().filter {it[0] == 'p'}.map {
        println("access: $it")
        it
    }
    println("-----")
    println("filtered: ${lazyMap2.toList()}")
Запустите вашу программу и наблюдайте за дополнительным выводом. Как и при получении первого элемента, внутренний println()вызывается только для элементов, к которым осуществляется доступ.
⇒
-----
доступ:
доступ к пагоде : пластиковый завод с
фильтром: [пагода, пластиковый завод]


7. Задача: начать работу с лямбдами и функциями высшего порядка
В этом задании вы познакомитесь с лямбдами и функциями высшего порядка в Kotlin.

Лямбда
В дополнение к традиционным именованным функциям, Kotlin поддерживает лямбды. Лямбда это выражение , которое делает функцию. Но вместо объявления именованной функции вы объявляете функцию, у которой нет имени. Частично это делает то, что лямбда-выражение теперь можно передавать как данные. В других языках лямбды называются анонимными функциями , литералами функций или аналогичными именами.

Функции высшего порядка
Вы можете создать функцию более высокого порядка, передав лямбду другой функции. В предыдущем задании вы создали функцию более высокого порядка с именем filter. Вы передали следующее лямбда-выражение в filterкачестве условия для проверки:
{it[0] == 'p'}

Аналогично, mapэто функция более высокого порядка, и лямбда, которую вы ей передали, была преобразованием, которое нужно применить.

Шаг 1: Узнайте о лямбдах
Как и именованные функции, лямбды могут иметь параметры. Для лямбд, параметры (и их типы, если необходимо) идут слева от так называемой стрелки функции ->. Код для выполнения идет справа от стрелки функции. Когда лямбда-переменная назначена переменной, вы можете вызывать ее как функцию.

Используя REPL ( Инструменты> Kotlin> Kotlin REPL ), попробуйте этот код:
var dirtyLevel = 20
val waterFilter = { dirty : Int -> dirty / 2}
println(waterFilter(dirtyLevel))
⇒ 10
В этом примере лямбда принимает Intименованный dirtyи возвращает dirty / 2. (Потому что фильтрация удаляет грязь.)

Синтаксис Котлина для типов функций тесно связан с его синтаксисом для лямбд. Используйте этот синтаксис для чистого объявления переменной, которая содержит функцию:
val waterFilter: (Int) -> Int = { dirty -> dirty / 2 }
Вот что говорит код:

Сделайте переменную с именем waterFilter.
waterFilterможет быть любой функцией, которая принимает Intи возвращает Int.
Назначьте лямбду на waterFilter.
Лямбда возвращает значение аргумента, dirtyделенное на 2.
Обратите внимание, что вам больше не нужно указывать тип лямбда-аргумента. Тип рассчитывается по выводу типа.

Шаг 2: Создайте функцию высшего порядка
Пока что примеры для лямбд выглядят в основном как функции. Настоящая сила лямбда-выражений заключается в их использовании для создания функций более высокого порядка, где аргументом одной функции является другая функция.

Напишите функцию высшего порядка. Вот базовый пример, функция, которая принимает два аргумента. Первый аргумент является целым числом. Второй аргумент - это функция, которая принимает целое число и возвращает целое число. Попробуйте это в REPL.
fun updateDirty(dirty: Int, operation: (Int) -> Int): Int {
   return operation(dirty)
}
Тело кода вызывает функцию, которая была передана в качестве второго аргумента, и передает ему первый аргумент.

Чтобы вызвать эту функцию, передайте ей целое число и функцию.
val waterFilter: (Int) -> Int = { dirty -> dirty / 2 }
println(updateDirty(30, waterFilter))
⇒ 15
Функция, которую вы передаете, не обязательно должна быть лямбда-выражением; вместо этого это может быть обычная именованная функция. Чтобы указать аргумент как обычную функцию, используйте ::оператор. Таким образом, Котлин знает, что вы передаете ссылку на функцию в качестве аргумента, а не пытаетесь вызвать функцию.

Попробуйте передать обычную именованную функцию updateDirty().
fun increaseDirty( start: Int ) = start + 1

println(updateDirty(15, ::increaseDirty))
⇒ 16
Примечание: Kotlin предпочитает, чтобы любой параметр, который принимает функцию, был последним параметром. При работе с функциями более высокого порядка Kotlin имеет специальный синтаксис, называемый синтаксисом вызова последнего параметра , который позволяет сделать код еще более лаконичным. В этом случае вы можете передать лямбду для параметра функции, но вам не нужно ставить лямбда в скобках.

var dirtyLevel = 19;
dirtyLevel = updateDirty(dirtyLevel) { dirtyLevel -> dirtyLevel + 23}
println(dirtyLevel)
⇒ 42

8. Резюме
Чтобы создать исходный файл Kotlin в IntelliJ IDEA, начните с проекта Kotlin.
Чтобы скомпилировать и запустить программу в IntelliJ IDEA, щелкните зеленый треугольник рядом с main()функцией. Вывод появится в окне журнала ниже.
В IntelliJ IDEA укажите аргументы командной строки для передачи в main()функцию в Run> Edit Configurations .
Почти все в Котлине имеет ценность. Вы можете использовать этот факт, чтобы сделать ваш код более кратким, используя значение ifили whenкак выражение или возвращаемое значение.
Аргументы по умолчанию устраняют необходимость в нескольких версиях функции или метода. Например:
fun swim(speed: String = "fast") { ... }
Компактные функции или функции с одним выражением могут сделать ваш код более читабельным. Например:
fun isTooHot(temperature: Int) = temperature > 30
Вы узнали некоторые основы о фильтрах, которые используют лямбда-выражения. Например:
val beginsWithP = decorations.filter { it [0] == 'p' }
Лямбда - выражение является выражением , которое делает безымянную функцию. Лямбда-выражения определены в фигурных скобках {}.
В функции более высокого порядка вы передаете функцию, такую ​​как лямбда-выражение, другой функции в качестве данных. Например:
dirtyLevel = updateDirty(dirtyLevel) { dirtyLevel -> dirtyLevel + 23}
В этом уроке многое, особенно если вы новичок в лямбдах. В последующем уроке рассматриваются лямбды и функции высшего порядка.

Примечание. Возможно, вы заметили, что в Kotlin, как и в некоторых других языках,
существует более одного правильного способа сделать что-то.
Создание более компактного кода иногда помогает удобочитаемости и даже производительности, а иногда - нет.
Когда вы узнаете больше о Kotlin, вы можете найти более простые и краткие способы сделать что-то.

9. Узнайте больше
Котлинская документация
Если вам нужна дополнительная информация по какой-либо теме этого курса или вы застряли, https://kotlinlang.org - ваша лучшая отправная точка.

Kotlin соглашения о кодировании
Котлин идиомы
Строковые шаблоны
when выражение
Функции с одним выражением
Функции высшего порядка и лямбды
фильтры
Последовательности
Синтаксис вызова последнего параметра
Котлин учебники
Веб- сайт https://play.kotlinlang.org содержит подробные учебные пособия под названием Kotlin Koans, веб-переводчик , а также полный набор справочной документации с примерами.

Курс Udacity
Чтобы просмотреть курс Udacity по этой теме, см. Kotlin Bootcamp for Programmers .

IntelliJ IDEA
Документацию для IntelliJ IDEA можно найти на веб-сайте JetBrains.

10. Домашнее задание
В этом разделе перечислены возможные домашние задания для студентов, которые работают через эту кодовую метку в рамках курса, проводимого инструктором. Инструктор должен сделать следующее:

Назначьте домашнюю работу, если требуется.
Общайтесь со студентами, как сдавать домашние задания.
Оцените домашние задания.
Преподаватели могут использовать эти предложения как можно меньше или столько, сколько хотят, и могут свободно назначать любую другую домашнюю работу, которая, по их мнению, является подходящей.

Если вы работаете над этим кодовым ярлыком самостоятельно, не стесняйтесь использовать эти домашние задания для проверки своих знаний.

Ответьте на эти вопросы
Вопрос 1
В contains(element: String)функции возвращается , trueесли строка elementсодержится в строке она вызвана. Каким будет вывод следующего кода?

val decorations = listOf ("rock", "pagoda", "plastic plant", "alligator", "flowerpot")

println(decorations.filter {it.contains('p')})

▢ [pagoda, plastic, plant]

▢ [pagoda, plastic plant]

▢ [pagoda, plastic plant, flowerpot]

▢ [rock, alligator]

вопрос 2
В следующем определении функции, какой из параметров требуется?
fun shouldChangeWater (day: String, temperature: Int = 22, dirty: Int = 20, numDecorations: Int = 0): Boolean {...}

▢ numDecorations

▢ dirty

▢ day

▢ temperature

Вопрос 3
Вы можете передать обычную именованную функцию (а не результат ее вызова) другой функции. Как бы вы перешли increaseDirty( start: Int ) = start + 1на updateDirty(dirty: Int, operation: (Int) -> Int)?

▢ updateDirty(15, &increaseDirty())

▢ updateDirty(15, increaseDirty())

▢ updateDirty(15, ("increaseDirty()"))

▢ updateDirty(15, ::increaseDirty)



