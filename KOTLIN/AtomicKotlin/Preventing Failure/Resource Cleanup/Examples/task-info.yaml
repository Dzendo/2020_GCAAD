type: theory
files:
- name: src/Closeable.kt
  visible: true
  text: |-
    // ResourceCleanup/Closeable.kt
    package resourcecleanup
    import atomictest.eq
    import checkinstructions.DataFile

    fun main() {
      DataFile("Results.txt")
        .bufferedReader()
        .use { it.readLines().first() } eq
        "Results"
    }
  learner_created: false
- name: src/UseLines.kt
  visible: true
  text: |-
    // ResourceCleanup/UseLines.kt
    package resourcecleanup
    import atomictest.eq
    import checkinstructions.DataFile

    fun main() {
      DataFile("Results.txt").useLines {
        it.filter { "#" in it }.first()  // [1]
      } eq "# ok"
      DataFile("Results.txt").useLines { lines ->
        lines.filter { line ->           // [2]
          "#" in line
        }.first()
      } eq "# ok"
    }
  learner_created: false
- name: src/ForEachLine.kt
  visible: true
  text: |-
    // ResourceCleanup/ForEachLine.kt
    package resourcecleanup
    import checkinstructions.DataFile
    import atomictest.*

    private val trace = Trace()

    fun main() {
      DataFile("Results.txt").forEachLine {
        if (it.startsWith("#"))
          trace("$it")
      }
      trace eq "# ok"
    }
  learner_created: false
- name: src/Usable.kt
  visible: true
  text: |-
    // ResourceCleanup/Usable.kt
    package resourcecleanup
    import java.io.Closeable
    import atomictest.*

    private val trace = Trace()

    class Usable() : Closeable {
      fun func() = trace("func()")
      override fun close() = trace("close()")
    }

    fun main() {
      Usable().use { it.func() }
      trace eq """
      func()
      close()
      """
    }
  learner_created: false
status: Unchecked
record: -1
