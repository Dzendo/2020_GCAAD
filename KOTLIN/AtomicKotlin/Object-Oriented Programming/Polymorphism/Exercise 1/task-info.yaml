type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 596
    length: 12
    placeholder_text: class Dragon
    initial_state:
      length: 12
      offset: 596
    initialized_from_dependency: false
    possible_answer: |-
      class Dragon:
        Character("Dragon"), Flyer {
        override fun play() = fly()
      }
    selected: false
    status: Unchecked
  - offset: 610
    length: 12
    placeholder_text: class Wizard
    initial_state:
      length: 12
      offset: 610
    initialized_from_dependency: false
    possible_answer: |-
      class Wizard:
        Character("Magician"), Magician, Flyer {
        override fun play() = doMagic() + fly()
      }
    selected: false
    status: Unchecked
  - offset: 828
    length: 18
    placeholder_text: //    c.playTurn()
    initial_state:
      length: 18
      offset: 828
    initialized_from_dependency: false
    possible_answer: '    c.playTurn()'
    selected: false
    status: Unchecked
  text: |-
    package polymorphismExercise1
    import atomictest.*

    private val trace = Trace()

    abstract class Character(val name: String) {
      abstract fun play(): String
    }

    interface Fighter {
      fun fight() = "Fight!"
    }

    interface Magician {
      fun doMagic() = "Magic!"
    }

    interface Flyer {
      fun fly() = "Fly!"
    }

    class Warrior :
      Character("Warrior"), Fighter {
      override fun play() = fight()
    }

    open class Elf(name: String = "Elf") :
      Character(name), Magician {
      override fun play() = doMagic()
    }

    class FightingElf :
      Elf("FightingElf"), Fighter {
      override fun play() =
        super.play() + fight()
    }

    class Dragon

    class Wizard

    fun Character.playTurn() =
      trace((name + ": " + play()))

    fun main() {
      val characters = listOf(
        Warrior(),
        Elf(),
        FightingElf(),
        Dragon(),
        Wizard()
      )
      characters.forEach { c ->
    //    c.playTurn()
      }
      trace eq """
        Warrior: Fight!
        Elf: Magic!
        FightingElf: Magic!Fight!
        Dragon: Fly!
        Magician: Magic!Fly!
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package polymorphismExercise1

    import org.junit.Test
    import util.unimplementedTest

    class TestPolymorphismExercise1 {
        @Test fun testSolution() {
            //TODO: implement your test here
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
