type: theory
files:
- name: src/Pet.kt
  visible: true
  text: |-
    // Polymorphism/Pet.kt
    package polymorphism
    import atomictest.eq

    open class Pet {
      open fun speak() = "Pet"
    }

    class Dog : Pet() {
      override fun speak() = "Bark!"
    }

    class Cat : Pet() {
      override fun speak() = "Meow"
    }

    fun talk(pet: Pet) = pet.speak()   // [1]

    fun main() {
      talk(Dog()) eq "Bark!"           // [2]
      talk(Cat()) eq "Meow"            // [3]
    }
  learner_created: false
- name: src/FantasyGame.kt
  visible: true
  text: "// Polymorphism/FantasyGame.kt\npackage polymorphism\nimport atomictest.*\n\
    \nprivate val trace = Trace()\n\nabstract class Character(val name: String) {\n\
    \  abstract fun play(): String\n}\n\ninterface Fighter {\n  fun fight() = \"Fight!\"\
    \n}\n\ninterface Magician {\n  fun doMagic() = \"Magic!\"\n}\n\nclass Warrior\
    \ :\n  Character(\"Warrior\"), Fighter {\n  override fun play() = fight()\n}\n\
    \nopen class Elf(name: String = \"Elf\") :\n  Character(name), Magician {\n  override\
    \ fun play() = doMagic()\n}\n\nclass FightingElf :\n  Elf(\"FightingElf\"), Fighter\
    \ {\n  override fun play() = \n    super.play() + fight()\n}\n\nfun Character.playTurn()\
    \ =         // [1]\n  trace((name + \": \" + play()))    // [2]\n\nfun main()\
    \ {\n  val characters: List<Character> = listOf(\n    Warrior(),\n    Elf(),\n\
    \    FightingElf()\n  )\n  characters.forEach { c ->\n    c.playTurn()       \
    \            // [3]\n  }\n  trace eq \"\"\"\n    Warrior: Fight!\n    Elf: Magic!\n\
    \    FightingElf: Magic!Fight!\n  \"\"\"\n}"
  learner_created: false
status: Unchecked
record: -1
