type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 270
    length: 10
    placeholder_text: class Hero
    initial_state:
      length: 10
      offset: 270
    initialized_from_dependency: false
    possible_answer: |-
      class Hero : ActionCharacter(), Fighter, Swimmer, Flyer {
        override fun swim() = "Hero swim"
        override fun fly() = "Hero fly"
      }
    selected: false
    status: Unchecked
  - offset: 311
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 311
    initialized_from_dependency: false
    possible_answer: println(x.fight())
    selected: false
    status: Unchecked
  - offset: 349
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 349
    initialized_from_dependency: false
    possible_answer: println(x.swim())
    selected: false
    status: Unchecked
  - offset: 384
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 384
    initialized_from_dependency: false
    possible_answer: println(x.fly())
    selected: false
    status: Unchecked
  - offset: 431
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 431
    initialized_from_dependency: false
    possible_answer: println(x.fight())
    selected: false
    status: Unchecked
  - offset: 454
    length: 175
    placeholder_text: |-
      /*
        val h = Hero()
        tryFight(h) // Treat it as a Fight
        trySwim(h) // Treat it as a Swim
        tryFly(h) // Treat it as a Fly
        doAction(h) // Treat it as an ActionCharacter
      */
    initial_state:
      length: 175
      offset: 454
    initialized_from_dependency: false
    possible_answer: |2-
        val h = Hero()
        tryFight(h) // Treat it as a Fight
        trySwim(h) // Treat it as a Swim
        tryFly(h) // Treat it as a Fly
        doAction(h) // Treat it as an ActionCharacter
    selected: false
    status: Unchecked
  text: |-
    // Upcasting/UpcastExercise3.kt
    package upcastingExercise3

    interface Fighter {
      fun fight(): String
    }

    interface Swimmer {
      fun swim(): String
    }

    interface Flyer {
      fun fly(): String
    }

    open class ActionCharacter {
      fun fight(): String = "ActionCharacter fight"
    }

    class Hero

    fun tryFight(x: Fighter) {
      TODO()
    }

    fun trySwim(x: Swimmer) {
      TODO()
    }

    fun tryFly(x: Flyer) {
      TODO()
    }

    fun doAction(x: ActionCharacter) {
      TODO()
    }

    fun main() {
    /*
      val h = Hero()
      tryFight(h) // Treat it as a Fight
      trySwim(h) // Treat it as a Swim
      tryFly(h) // Treat it as a Fly
      doAction(h) // Treat it as an ActionCharacter
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package upcastingExercise3

    import org.junit.Test
    import util.unimplementedTest

    class TestUpcastingExercise3 {
        @Test fun testSolution() {
            //TODO: implement your test here
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
