type: theory
files:
- name: src/NewAngle.kt
  visible: true
  text: |-
    // UsingOperators/NewAngle.kt
    import atomictest.eq

    fun main() {
      val list = mutableListOf('a', 'b', 'c')
      list[1] eq 'b' // operator get()
      list.get(1) eq 'b' // Explicit call
      list[2] = 'x' // operator set()
      list.set(2, 'x') // Explicit call
      list[2] eq 'x'
      ('a' in list) eq true // operator contains()
      list.contains('a') eq true // Explicit call
    }
  learner_created: false
- name: src/OperatorPlus.kt
  visible: true
  text: |-
    // UsingOperators/OperatorPlus.kt
    import atomictest.eq

    fun main() {
      val mutableList = mutableListOf(1, 2, 3)
      mutableList += 4 // operator plusAssign()
      mutableList.plusAssign(5) // Explicit
      mutableList eq "[1, 2, 3, 4, 5]"
      val list = listOf(1) // Read-only
      val newList = list + 2 // operator plus()
      list eq "[1]"
      newList eq "[1, 2]"
      val another = list.plus(3) // Explicit
      another eq "[1, 3]"
    }
  learner_created: false
- name: src/Unexpected.kt
  visible: true
  text: |-
    // UsingOperators/Unexpected.kt
    import atomictest.eq

    fun main() {
      var list = listOf(1, 2)
      list += 3  // Probably unexpected
      list eq "[1, 2, 3]"
    }
  learner_created: false
- name: src/ReadOnlyAndPlus.kt
  visible: true
  text: |-
    // UsingOperators/ReadOnlyAndPlus.kt
    import atomictest.eq

    fun main() {
      var list = listOf(1, 2)
      val initial = list
      list += 3
      list eq "[1, 2, 3]"
      list = list.plus(4)
      list eq "[1, 2, 3, 4]"
      initial eq "[1, 2]"
    }
  learner_created: false
- name: src/CompareTo.kt
  visible: true
  text: |-
    // UsingOperators/CompareTo.kt
    package usingoperators
    import atomictest.eq

    data class Contact(
      val name: String,
      val mobile: String
    ) : Comparable<Contact> {
      override
      fun compareTo(other: Contact): Int =
        name.compareTo(other.name)
    }

    fun main() {
      val alice = Contact("Alice", "0123456789")
      val bob = Contact("Bob", "9876543210")
      (alice < bob) eq true
      (alice <= bob) eq true
      (alice > bob) eq false
      (alice >= bob) eq false
      val contacts = listOf(alice, bob)
      contacts.sorted() eq listOf(alice, bob)
      contacts.sortedDescending() eq
        listOf(bob, alice)
    }
  learner_created: false
- name: src/DestructuringDuo.kt
  visible: true
  text: |-
    // UsingOperators/DestructuringDuo.kt
    import atomictest.eq

    class Duo(val x: Int, val y: Int) {
      companion object {
        var msg = ""
      }

      operator fun component1(): Int {
        msg += "component1()"
        return x
      }

      operator fun component2(): Int {
        msg += "component2()"
        return y
      }
    }

    fun main() {
      val (a, b) = Duo(1, 2)
      a eq 1
      b eq 2
      Duo.msg eq "component1()component2()"
    }
  learner_created: false
- name: src/DestructuringMap.kt
  visible: true
  text: |-
    // UsingOperators/DestructuringMap.kt
    package usingoperators
    import atomictest.eq

    fun main() {
      val map = mapOf("a" to 1)
      for ((key, value) in map) {
        key eq "a"
        value eq 1
      }
      // Destructuring assignment compiles to:
      for (entry in map) {
        val key = entry.component1()
        val value = entry.component2()
        key eq "a"
        value eq 1
      }
    }
  learner_created: false
- name: src/DestructuringData.kt
  visible: true
  text: |-
    // UsingOperators/DestructuringData.kt
    package usingoperators
    import atomictest.eq

    data class Person(
      val name: String,
      val age: Int
    ) {
      // Compiler generates:
      // fun component1() = name
      // fun component2() = age
    }

    fun main() {
      val person = Person("Alice", 29)
      val (name, age) = person
      // Destructuring assignment compiles to:
      val name_ = person.component1()
      val age_ = person.component2()
      name eq "Alice"
      age eq 29
      name_ eq "Alice"
      age_ eq 29
    }
  learner_created: false
status: Unchecked
record: -1
