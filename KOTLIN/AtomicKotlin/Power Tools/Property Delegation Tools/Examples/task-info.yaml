type: theory
files:
- name: src/Team.kt
  visible: true
  text: |-
    // PropertyDelegation/Team.kt
    import kotlin.properties.Delegates

    class Team {
      var captain: String by
      Delegates
        .observable("<none>") { prop, old, new ->
          println("$prop $old to $new")
        }
    }

    fun main() {
      val team = Team()
      team.captain = "Adam"
      team.captain = "Amanda"
    }
    /* Output:
    var Team.captain: kotlin.String <none> to Adam
    var Team.captain: kotlin.String Adam to Amanda
    */
  learner_created: false
- name: src/TeamWithTraditions.kt
  visible: true
  text: |-
    // PropertyDelegation/TeamWithTraditions.kt
    import atomictest.eq
    import kotlin.properties.Delegates

    class TeamWithTraditions {
      var captain: String
        by Delegates
          .vetoable("Adam") { _, old, new ->
            val canChange = new.startsWith("A")
            if (canChange)
              println("$old -> $new")
            else
              println("It's tradition, sorry " +
                "$new")
            canChange
          }
    }

    fun main() {
      val team = TeamWithTraditions()
      team.captain = "Amanda"
      team.captain = "Bill"
      team.captain eq "Amanda"
    }
    /* Output:
    Adam -> Amanda
    It's tradition, sorry Bill
    Amanda
    */
  learner_created: false
status: Unchecked
record: -1
