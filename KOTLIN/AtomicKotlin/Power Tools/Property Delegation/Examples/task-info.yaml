type: theory
files:
- name: src/NickName.kt
  visible: true
  text: |-
    // PropertyDelegation/NickName.kt
    package propertydelegation
    import atomictest.eq
    import kotlin.reflect.KProperty

    class Person(
      val formalName: String,
      val nickName: String
    ) {
      var casual = false
      val name by NickName()
    }

    class NickName() {
      operator fun
        getValue(p: Person, prop: KProperty<*>) =
        "'$prop' " +
          if (p.casual)
            p.nickName else p.formalName
    }

    fun main() {
      val babs = Person("Barbara", "Babs")
      babs.name eq
        "'val propertydelegation.Person.name: " +
        "kotlin.String' Barbara"
      babs.casual = true
      babs.name eq
        "'val propertydelegation.Person.name: " +
        "kotlin.String' Babs"
    }
  learner_created: false
- name: src/FibonacciProperty.kt
  visible: true
  text: |-
    // PropertyDelegation/FibonacciProperty.kt
    import atomictest.eq
    import recursion.fibonacci
    import kotlin.reflect.KProperty

    class Fibonacci {
      private var current: Long = 0
      operator fun getValue(
        dgtor: Any?,
        prop: KProperty<*>
      ) = current

      operator fun setValue(
        dgtor: Any?,
        prop: KProperty<*>,
        n: Long
      ) {
        current = fibonacci(n.toInt())
      }
    }

    fun main() {
      var f by Fibonacci()
      f eq 0L
      f = 22L
      f eq 17711L
      f = 90L
      f eq 2880067194370816120L
    }
  learner_created: false
status: Unchecked
record: -1
